import Settings from '../../../../../../components/examSettings';
import { session } from '../../../../../../utils';
import Wrapper from '../../../../../../components/wrapper';
import { UserProps } from 'redux/slice/user';
import { getServerData } from '../../../../../../utils';
import ErrorMessage from '../../../../../../components/shared/error/pageError';

export default function Details(props) {
    return (
        <Wrapper
            title="exam settings"
            description="exam settings"
            showHeader={true}
            user={props?.user && JSON.parse(props?.user?.user)}
        >
            {props.errorMessage ? (
                <ErrorMessage
                    errorMessage={props.errorMessage}
                    redirectLink={`/create-account?${props.redirect}&invitationToken=${props.invitationToken}`}
                />
            ) : (
                <Settings {...props} />
            )}
        </Wrapper>
    );
}
export async function getServerSideProps({ query, req }) {
    try {
        const user = session.get(req) as unknown as UserProps;

        const { pageId = 1, limit = 500000, centreId, id, centreSlug } = query;

        if (!user) {
            return {
                props: {
                    errorMessage: 'Kindly login to continue',
                    redirect: `redirect=/centre/${centreId}/exam/${id}/exam-settings`,
                },
            };
        }
        const exam = await getServerData(`/exam/${id}`, {
            token: user.token,
        });
        const questions = await getServerData(
            `/centre/${centreId}/exam/${id}/questions?showAnswer=false`,
            {
                token: user.token,
            }
        );
        const subscribers = await getServerData(
            `/centre/${centreId}/exam/${id}/subscribers`,
            {
                token: user.token,
            }
        );
        const pins = await getServerData(
            `/centre/${centreId}/exam/${id}/pins`,
            {
                token: user.token,
            }
        );
        const results = await getServerData(
            `/centre/${centreId}/exam/${id}/answers?pageId=${pageId}&limit=${limit}`,
            {
                token: user.token,
            }
        );
        return {
            props: {
                centreId,
                id,
                exam,
                user,
                questions,
                subscribers,
                pins,
                results,
                centreSlug,
            },
        };
    } catch ({ message }) {
        return { props: { errorMessage: message } };
    }
}
